
__all__: list[str]

class Pdb:
    coordinates: list[list[float]]
    atomnames: list[str]

    def __new__(cls, filename: str) -> Pdb : ...
    def parse(self) : ...
    def parse_by_monomers(self) -> list[Pdb]: ...


class Xyz:

    def __new__(cls, filename: str) -> Xyz : ...
    def parse(self) -> list[list[float]] : ...


class CP5: 

    def __new__(cls, amplitude: float = 0. , phase_angle: float = 0. ): ...
    def from_atomnames(self, pdb: Pdb, query_names: list[str]) -> tuple[float, float] :  ...
    def from_indices(self, coordinates: list[list[float]], indices: list[int])  -> tuple[float, float] :  ...
    def invert(self) -> list[list[float]]: ...


class CP6: 

    def __new__(cls, amplitude: float = 0. , phase_angle: float = 0. , theta: float = 0.): ...
    def from_atomnames(self, pdb: Pdb, query_names: list[str]) -> tuple[float, float, float] :  ...
    def from_indices(self, coordinates: list[list[float]], indices: list[int])  -> tuple[float, float, float] :  ...
    def invert(self) -> list[list[float]]: ...


class AS:

    def __new__(cls, amplitude: float = 0. , phase_angle: float = 0. ): ...
    def from_atomnames(self, pdb: Pdb, query_names: list[str]) -> tuple[float, float] : ...
    def from_indices(self, coordinates: list[list[float]], indices: list[int])  -> tuple[float, float] : ...
#    def invert(self) -> list[list[float]]: ...

class SP:

    def __new__(cls) : ...
    def from_atomnames(self, pdb: Pdb, query_names: list[str]) -> tuple[list[float], list[float]] : ...
    def from_indices(self, coordinates: list[list[float]], indices: list[int])  -> tuple[list[float], list[float]] : ...
